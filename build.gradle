plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.node-gradle.node" version "3.3.0"
}

group = 'kr.co'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


}

tasks.named('test') {
    useJUnitPlatform()
}

// 노드 버전과 노드를 어디에 다운받을지 여부
node {
    nodeModulesDir = file("$projectDir/front-end")
    version = '18.3.0'
    download = true
}

// npm run build를 실행하겠다는 뜻
task npmBuild(type:NpmTask){
    args = ['run', "build"]
}

// FE 코드를 build 폴더 안에 build 시키겠다.
task copyFrontEnd(type: Copy){
    from "$projectDir/front-end/static"
    into 'build/resources/main/static/.'
}

// clean이 일어나면 삭제해주겠다.
task cleanFrontEnd(type: Delete){
    delete "$projectDir/front-end/static", "$projectDir/front-end/node_modules"
}


// 체인 형태로 서로 엮어둠.
// 프론트코드를 띄우면 시간이 오래걸리기 때문에 잠시 중지.
//npmBuild.dependsOn npmInstall
//copyFrontEnd.dependsOn npmBuild
//compileJava.dependsOn copyFrontEnd
//
//clean.dependsOn cleanFrontEnd